"""tests for warp.py"""

import numpy as np
import tensorflow as tf
import warp

class TestWarp(tf.test.TestCase):
    def setUp(self):
        self.image = tf.constant([[[[ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5]],

        [[ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5]],

        [[ 5],
         [ 5],
         [ 0],
         [ 1],
         [ 2],
         [ 3],
         [ 5],
         [ 5]],

        [[ 5],
         [ 5],
         [ 4],
         [ 5],
         [ 6],
         [ 7],
         [ 5],
         [ 5]],

        [[ 5],
         [ 5],
         [ 8],
         [ 9],
         [10],
         [11],
         [ 5],
         [ 5]],

        [[ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5]],

        [[ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5]]]])

        self.image_np = np.array([[[[ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5]],

        [[ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5]],

        [[ 5],
         [ 5],
         [ 0],
         [ 1],
         [ 2],
         [ 3],
         [ 5],
         [ 5]],

        [[ 5],
         [ 5],
         [ 4],
         [ 5],
         [ 6],
         [ 7],
         [ 5],
         [ 5]],

        [[ 5],
         [ 5],
         [ 8],
         [ 9],
         [10],
         [11],
         [ 5],
         [ 5]],

        [[ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5]],

        [[ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5],
         [ 5]]]])

    def testDenseWarp(self):
        """Tests dense_warp"""

        correct_warp = np.array([[5, 5, 5, 5, 5, 5, 5, 5],
                                 [5, 5, 5, 5, 5, 5, 5, 5],
                                 [5, 5, 5, 5, 5, 5, 5, 5],
                                 [5, 5, 0, 1, 2, 3, 5, 5],
                                 [5, 5, 4, 5, 6, 7, 5, 5],
                                 [5, 5, 8, 9, 10, 11, 5, 5],
                                 [5, 5, 5, 5, 5, 5, 5, 5], ])

        warp_matrix = tf.constant([[[[1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.]],

                             [[1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.]],

                             [[1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.]],

                             [[1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.]],

                             [[1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.]],

                             [[1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.]],

                             [[1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.],
                              [1., 0.]], ]])

        warped_image = warp.dense_warp(self.image, [warp_matrix])
        with tf.Session() as sess:
            warped_image_eval = sess.run(warped_image)
        self.assertAllClose(warped_image_eval[0,:,:,0], correct_warp)

    def testDenseWarpNoWarp(self):
        """Tests dense_warp"""

        warp_matrix = tf.constant([[[[0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.]],

          [[0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.]],

          [[0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.]],

          [[0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.]],

          [[0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.]],

          [[0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.]],

          [[0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.],
           [0., 0.]]]])

        warped_image = warp.dense_warp(self.image, [warp_matrix])
        with tf.Session() as sess:
            warped_image_eval = sess.run(warped_image)
        self.assertAllClose(warped_image_eval, self.image_np)

if __name__ == '__main__':
    tf.test.main()
